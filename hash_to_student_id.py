#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import csv
import pandas as pd
import sys
import argparse
import os
from tqdm import tqdm

def hash_student_id_fnv1a(student_id):
    """使用FNV-1a算法计算学号的32位哈希值"""
    FNV_OFFSET_BASIS = 2166136261
    FNV_PRIME = 16777619
    
    id_str = str(student_id).zfill(10)
    
    hash_value = FNV_OFFSET_BASIS
    
    for i in range(10):
        if i < len(id_str):
            byte = ord(id_str[i])
        else:
            byte = ord('0')
        
        hash_value ^= byte
        hash_value = (hash_value * FNV_PRIME) % (2**32)
    
    return hash_value

def generate_student_id_mapping(start_year=2020, end_year=2030):
    """生成指定年份范围内所有可能学号的哈希映射表"""
    print(f"正在生成学号哈希映射表 ({start_year}-{end_year})...")
    
    # 常见的专业代码（根据观察到的学号模式扩展）
    major_codes = [
        # 计算机相关专业
        '121', '122', '123', '124', '125', '126', '127', '128', '129',
        # 工程类专业
        '131', '132', '133', '134', '135', '136', '137', '138', '139',
        # 理学类专业
        '141', '142', '143', '144', '145', '146', '147', '148', '149',
        # 管理类专业
        '151', '152', '153', '154', '155', '156', '157', '158', '159',
        # 经济类专业
        '161', '162', '163', '164', '165', '166', '167', '168', '169',
        # 文学类专业
        '171', '172', '173', '174', '175', '176', '177', '178', '179',
        # 法学类专业
        '181', '182', '183', '184', '185', '186', '187', '188', '189',
        # 其他专业代码
        '191', '192', '193', '194', '195', '196', '197', '198', '199',
        # 200系列
        '201', '202', '203', '204', '205', '206', '207', '208', '209',
        '211', '212', '213', '214', '215', '216', '217', '218', '219',
        '221', '222', '223', '224', '225', '226', '227', '228', '229',
        '231', '232', '233', '234', '235', '236', '237', '238', '239',
        '241', '242', '243', '244', '245', '246', '247', '248', '249',
        '251', '252', '253', '254', '255', '256', '257', '258', '259',
        '261', '262', '263', '264', '265', '266', '267', '268', '269',
        '271', '272', '273', '274', '275', '276', '277', '278', '279',
        '281', '282', '283', '284', '285', '286', '287', '288', '289',
        '291', '292', '293', '294', '295', '296', '297', '298', '299',
        # 300系列
        '301', '302', '303', '304', '305', '306', '307', '308', '309',
        '311', '312', '313', '314', '315', '316', '317', '318', '319',
        '321', '322', '323', '324', '325', '326', '327', '328', '329',
        '331', '332', '333', '334', '335', '336', '337', '338', '339',
        '341', '342', '343', '344', '345', '346', '347', '348', '349',
        '351', '352', '353', '354', '355', '356', '357', '358', '359',
        '361', '362', '363', '364', '365', '366', '367', '368', '369',
        '371', '372', '373', '374', '375', '376', '377', '378', '379',
        '381', '382', '383', '384', '385', '386', '387', '388', '389',
        '391', '392', '393', '394', '395', '396', '397', '398', '399',
        # 400系列
        '401', '402', '403', '404', '405', '406', '407', '408', '409',
        '411', '412', '413', '414', '415', '416', '417', '418', '419',
        '421', '422', '423', '424', '425', '426', '427', '428', '429',
        '431', '432', '433', '434', '435', '436', '437', '438', '439',
        '441', '442', '443', '444', '445', '446', '447', '448', '449',
        '451', '452', '453', '454', '455', '456', '457', '458', '459',
        '461', '462', '463', '464', '465', '466', '467', '468', '469',
        '471', '472', '473', '474', '475', '476', '477', '478', '479',
        '481', '482', '483', '484', '485', '486', '487', '488', '489',
        '491', '492', '493', '494', '495', '496', '497', '498', '499',
        # 500系列
        '501', '502', '503', '504', '505', '506', '507', '508', '509',
        '511', '512', '513', '514', '515', '516', '517', '518', '519',
        '521', '522', '523', '524', '525', '526', '527', '528', '529',
        '531', '532', '533', '534', '535', '536', '537', '538', '539',
        '541', '542', '543', '544', '545', '546', '547', '548', '549',
        '551', '552', '553', '554', '555', '556', '557', '558', '559',
        '561', '562', '563', '564', '565', '566', '567', '568', '569',
        '571', '572', '573', '574', '575', '576', '577', '578', '579',
        '581', '582', '583', '584', '585', '586', '587', '588', '589',
        '591', '592', '593', '594', '595', '596', '597', '598', '599',
        # 600系列
        '601', '602', '603', '604', '605', '606', '607', '608', '609',
        '611', '612', '613', '614', '615', '616', '617', '618', '619',
        '621', '622', '623', '624', '625', '626', '627', '628', '629',
        '631', '632', '633', '634', '635', '636', '637', '638', '639',
        '641', '642', '643', '644', '645', '646', '647', '648', '649',
        '651', '652', '653', '654', '655', '656', '657', '658', '659',
        '661', '662', '663', '664', '665', '666', '667', '668', '669',
        '671', '672', '673', '674', '675', '676', '677', '678', '679',
        '681', '682', '683', '684', '685', '686', '687', '688', '689',
        '691', '692', '693', '694', '695', '696', '697', '698', '699',
        # 700系列
        '701', '702', '703', '704', '705', '706', '707', '708', '709',
        '711', '712', '713', '714', '715', '716', '717', '718', '719',
        '721', '722', '723', '724', '725', '726', '727', '728', '729',
        '731', '732', '733', '734', '735', '736', '737', '738', '739',
        '741', '742', '743', '744', '745', '746', '747', '748', '749',
        '751', '752', '753', '754', '755', '756', '757', '758', '759',
        '761', '762', '763', '764', '765', '766', '767', '768', '769',
        '771', '772', '773', '774', '775', '776', '777', '778', '779',
        '781', '782', '783', '784', '785', '786', '787', '788', '789',
        '791', '792', '793', '794', '795', '796', '797', '798', '799',
        # 800系列
        '801', '802', '803', '804', '805', '806', '807', '808', '809',
        '811', '812', '813', '814', '815', '816', '817', '818', '819',
        '821', '822', '823', '824', '825', '826', '827', '828', '829',
        '831', '832', '833', '834', '835', '836', '837', '838', '839',
        '841', '842', '843', '844', '845', '846', '847', '848', '849',
        '851', '852', '853', '854', '855', '856', '857', '858', '859',
        '861', '862', '863', '864', '865', '866', '867', '868', '869',
        '871', '872', '873', '874', '875', '876', '877', '878', '879',
        '881', '882', '883', '884', '885', '886', '887', '888', '889',
        '891', '892', '893', '894', '895', '896', '897', '898', '899',
        # 900系列
        '901', '902', '903', '904', '905', '906', '907', '908', '909',
        '911', '912', '913', '914', '915', '916', '917', '918', '919',
        '921', '922', '923', '924', '925', '926', '927', '928', '929',
        '931', '932', '933', '934', '935', '936', '937', '938', '939',
        '941', '942', '943', '944', '945', '946', '947', '948', '949',
        '951', '952', '953', '954', '955', '956', '957', '958', '959',
        '961', '962', '963', '964', '965', '966', '967', '968', '969',
        '971', '972', '973', '974', '975', '976', '977', '978', '979',
        '981', '982', '983', '984', '985', '986', '987', '988', '989',
        '991', '992', '993', '994', '995', '996', '997', '998', '999'
    ]
    
    hash_to_id = {}
    total_combinations = (end_year - start_year + 1) * len(major_codes) * 1000
    
    print(f"预计生成 {total_combinations:,} 个学号映射")
    
    # 为每个年份生成学号
    for year in range(start_year, end_year + 1):
        print(f"处理 {year} 年学号...")
        
        # 为每个专业代码生成所有可能的学号
        for major in tqdm(major_codes, desc=f"{year}年专业代码", leave=False):
            for last_three in range(1000):  # 000-999
                student_id = f"{year}{major}{last_three:03d}"
                hash_value = hash_student_id_fnv1a(student_id)
                hash_to_id[hash_value] = student_id
    
    print(f"实际生成了 {len(hash_to_id):,} 个唯一学号映射")
    return hash_to_id

def convert_grades_file(input_file, output_file, start_year=2020, end_year=2030):
    """将成绩文件中的哈希ID转换为学号"""
    
    if not os.path.exists(input_file):
        print(f"错误：输入文件 '{input_file}' 不存在")
        return False
    
    # 生成哈希到学号的映射
    hash_to_id = generate_student_id_mapping(start_year, end_year)
    
    try:
        # 读取成绩文件
        print(f"正在读取成绩文件: {input_file}")
        df = pd.read_csv(input_file)
        
        if 'Hashed ID' not in df.columns:
            print("错误：成绩文件中没有找到 'Hashed ID' 列")
            return False
        
        print(f"读取到 {len(df)} 条成绩记录")
        
        # 转换哈希ID为学号
        converted_count = 0
        not_found_count = 0
        
        def convert_hash_to_id(hash_id):
            nonlocal converted_count, not_found_count
            if hash_id in hash_to_id:
                converted_count += 1
                return hash_to_id[hash_id]
            else:
                not_found_count += 1
                return hash_id  # 保持原值
        
        print("正在转换哈希ID为学号...")
        df['Student ID'] = df['Hashed ID'].apply(convert_hash_to_id)
        
        # 重新排列列，将Student ID放在第一列
        columns = ['Student ID'] + [col for col in df.columns if col not in ['Student ID', 'Hashed ID']]
        df_output = df[columns]
        
        # 保存结果
        df_output.to_csv(output_file, index=False, encoding='utf-8-sig')
        
        print(f"\n转换完成！")
        print(f"成功转换: {converted_count} 个哈希ID")
        print(f"未找到对应学号: {not_found_count} 个哈希ID")
        print(f"转换成功率: {converted_count/(converted_count+not_found_count)*100:.1f}%")
        print(f"结果已保存到: {output_file}")
        
        # 显示前几行结果
        print("\n前5行结果预览:")
        print(df_output.head().to_string())
        
        return True
        
    except Exception as e:
        print(f"处理文件时出错: {e}")
        return False

def main():
    parser = argparse.ArgumentParser(
        description='将成绩文件中的哈希ID转换为真实学号（支持多年份）',
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""使用示例:
  python3 hash_to_student_id.py 2025SpringCS100student_end.csv converted_grades.csv
  python3 hash_to_student_id.py -i grades.csv -o output.csv --start-year 2020 --end-year 2025
        """)
    
    parser.add_argument('input_file', nargs='?',
                       help='输入的成绩CSV文件路径（包含哈希ID）')
    parser.add_argument('output_file', nargs='?', default='converted_grades.csv',
                       help='输出CSV文件路径（默认: converted_grades.csv）')
    
    parser.add_argument('-i', '--input', dest='input_file_alt',
                       help='输入的成绩CSV文件路径')
    parser.add_argument('-o', '--output', dest='output_file_alt',
                       help='输出CSV文件路径')
    parser.add_argument('--start-year', type=int, default=2023,
                       help='起始年份（默认: 2020）')
    parser.add_argument('--end-year', type=int, default=2024,
                       help='结束年份（默认: 2030）')
    
    args = parser.parse_args()
    
    input_file = args.input_file_alt or args.input_file
    output_file = args.output_file_alt or args.output_file or 'converted_grades.csv'
    
    if not input_file:
        parser.print_help()
        print("\n错误：必须提供输入文件路径")
        sys.exit(1)
    
    if args.start_year > args.end_year:
        print("错误：起始年份不能大于结束年份")
        sys.exit(1)
    
    print(f"输入文件: {input_file}")
    print(f"输出文件: {output_file}")
    print(f"年份范围: {args.start_year}-{args.end_year}")
    print("-" * 50)
    
    success = convert_grades_file(input_file, output_file, args.start_year, args.end_year)
    
    if success:
        print(f"\n✅ 转换完成！结果已保存到 {output_file}")
        sys.exit(0)
    else:
        print("\n❌ 转换失败")
        sys.exit(1)

if __name__ == "__main__":
    main()